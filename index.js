import 'dotenv/config'
import mongoose from 'mongoose'
import { Bot, GrammyError, InlineKeyboard, session } from 'grammy'
import AddressSchema from './addresses.js'
import { countType, remType, sendDataToServer } from './config.js'

const Address = mongoose.model('Address', AddressSchema)

mongoose.set('strictQuery', false)
const connectDb = async () => {
	try {
		const c = await mongoose.connect(process.env.MONGO_URI)
		console.log(c.connection.host)
	} catch (err) {
		console.log(err)
		process.exit(1)
	}
}

const bot = new Bot(process.env.TG_TOKEN)

bot.use(
	session({
		initial: () => ({
			chat_id: '',
			real_address: '',
			nomber_facture_p: '',
			type_counter: '',
			rem: '',
			phonenumber_p: '',
			pokazaniya_p: '',
			pokazaniya_p2: '',
			pokazaniya_p3: '',
		}),
	})
)
bot.api.setMyCommands([
	{
		command: 'add_address',
		description: '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É',
	},
	{
		command: 'get_addresses',
		description: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—ó –∞–¥—Ä–µ—Å–∏',
	},
])

bot.command('add_address', async ctx => {
	try {
		ctx.session = {}
		ctx.session.chat_id = ctx.msg.chat.id
		let counter = 1
		const inlineKeyboard = new InlineKeyboard()
		Object.keys(remType).forEach(key => {
			inlineKeyboard.text(`${counter}. ${remType[key]}`, `select_rem|${key}`)
			inlineKeyboard.row()
			counter++
		})
		await ctx.reply('üåÜ –í–∫–∞–∂—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:', {
			reply_markup: inlineKeyboard,
			parse_mode: 'HTML',
		})

		ctx.session.currentStep = 1
	} catch (err) {
		console.error('Error handling add_address command:', err.message)
		await ctx.reply('Failed to initiate address addition.')
	}
})

bot.command('get_addresses', async ctx => {
	try {
		console.log(ctx.msg.chat.id)
		const addresses = await Address.where({
			chat_id: ctx.msg.chat.id,
		})
		if (addresses && !addresses.length) {
			return await ctx.reply(
				'<b>üè† –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–¥—Ä–µ—Å, –¥–æ–¥–∞—Ç–∏ /add_address</b>',
				{ parse_mode: 'HTML' }
			)
		}

		const inlineKeyboard = new InlineKeyboard()
		addresses.forEach((a, i) => {
			inlineKeyboard.text(
				`üè† ${a.real_address}`,
				`${a.chat_id}|${a.real_address}|${a.nomber_facture_p}|${a.type_counter}|${a.rem}|${a.phonenumber_p}`
			)
			inlineKeyboard.row()
		})
		await ctx.reply('<b>‚ûï –û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–∫–∞–∑–∞–Ω—å:</b>', {
			reply_markup: inlineKeyboard,
			parse_mode: 'HTML',
		})
	} catch (err) {
		console.error('Error adding address:', err.message)
		await ctx.reply('Failed to add address.')
	}
})

bot.on('message', async ctx => {
	try {
		if (!ctx.session.chat_id) {
			return await ctx.reply(
				'<b>üè† –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∞–¥—Ä–µ—Å—É /get_addresses –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–∫–∞–∑–∞–Ω—å</b>',
				{ parse_mode: 'HTML' }
			)
		}

		const messageText = ctx.message.text.trim().toLowerCase()
		const type_counter = ctx.session.type_counter
		console.log(messageText)
		if (ctx.session.currentStep) {
			switch (ctx.session.currentStep) {
				case 1:
					ctx.session.rem = messageText
					await ctx.reply('üè† –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É:')
					ctx.session.currentStep = 2
					break
				case 2:
					ctx.session.real_address = messageText
					await ctx.reply('üíº –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:')
					ctx.session.currentStep = 3
					break
				case 3:
					ctx.session.nomber_facture_p = messageText

					const inlineKeyboard = new InlineKeyboard()
					Object.keys(countType).forEach(key => {
						inlineKeyboard.text(`${countType[key]}`, `select_countType|${key}`)
						inlineKeyboard.row()
					})
					await ctx.reply('üí° –í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:', {
						reply_markup: inlineKeyboard,
					})
					ctx.session.currentStep = 4
					break
				case 4:
					ctx.session.type_counter = messageText
					await ctx.reply('üì± –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
					ctx.session.currentStep = 5
					break
				case 5:
					ctx.session.phonenumber_p = messageText

					const keyboardMarkup = new InlineKeyboard()
						.text('–î–æ–¥–∞—Ç–∏', 'save_address')
						.text('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'get_addresses')
					const formattedMessage = `
					üåÜ <b>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</b> ${remType[ctx.session.rem]}
üè† <b>–ê–¥—Ä–µ—Å–∞:</b> ${ctx.session.real_address}
üíº <b>–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:</b> ${ctx.session.nomber_facture_p}
üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> ${ctx.session.phonenumber_p}
üí° <b>–¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:</b> ${countType[ctx.session.type_counter]}`
					return await ctx.reply(formattedMessage, {
						reply_markup: keyboardMarkup,
						parse_mode: 'HTML',
					})
					break
				default:
					await ctx.reply('Unexpected step. Please try again.')
					break
			}
		}

		if (type_counter === '2') {
			if (ctx.session.stage === 'day_reading') {
				if (/^\d+$/.test(messageText)) {
					ctx.session.day_reading = messageText
					await ctx.reply(
						'üåô –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É –≤ –Ω—ñ—á–Ω–∏–π —á–∞—Å:'
					)
					ctx.session.stage = 'night_reading'
				} else {
					await ctx.reply(
						'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
						{ parse_mode: 'HTML' }
					)
				}
			} else if (ctx.session.stage === 'night_reading') {
				if (/^\d+$/.test(messageText)) {
					ctx.session.night_reading = messageText
					const keyboardMarkup = new InlineKeyboard()
						.text('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏', 'send_data')
						.text('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'get_addresses')
					const formattedMessage = `
					üåÜ <b>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</b> ${remType[ctx.session.rem]}
üè† <b>–ê–¥—Ä–µ—Å–∞:</b> ${ctx.session.real_address}
üíº <b>–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:</b> ${ctx.session.nomber_facture_p}
üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> ${ctx.session.phonenumber_p}
üí° <b>–¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:</b> ${countType[ctx.session.type_counter]}
üåû <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –≤–¥–µ–Ω—å:</b> ${ctx.session.day_reading}
üåô <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –≤–Ω–æ—á—ñ:</b> ${ctx.session.night_reading}`
					await ctx.reply(formattedMessage, {
						reply_markup: keyboardMarkup,
						parse_mode: 'HTML',
					})
				} else {
					await ctx.reply(
						'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
						{ parse_mode: 'HTML' }
					)
				}
			}
		} else if (type_counter === '3') {
			if (ctx.session.stage === 'day_reading') {
				if (/^\d+$/.test(messageText)) {
					ctx.session.day_reading = messageText
					await ctx.reply(
						'üåô –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É –≤ –Ω—ñ—á–Ω–∏–π —á–∞—Å:'
					)
					ctx.session.stage = 'night_reading'
				} else {
					await ctx.reply(
						'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
						{ parse_mode: 'HTML' }
					)
				}
			} else if (ctx.session.stage === 'night_reading') {
				if (/^\d+$/.test(messageText)) {
					ctx.session.night_reading = messageText
					await ctx.reply(
						'‚ö°Ô∏è –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É –≤ –ø—ñ–∫:'
					)
					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
					ctx.session.stage = 'peak_reading'
				} else {
					await ctx.reply(
						'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
						{ parse_mode: 'HTML' }
					)
				}
			} else if (ctx.session.stage === 'peak_reading') {
				if (/^\d+$/.test(messageText)) {
					ctx.session.peak_reading = messageText
					const keyboardMarkup = new InlineKeyboard()
						.text('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏', 'send_data')
						.text('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'get_addresses')
					const formattedMessage = `
					üåÜ <b>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</b> ${remType[ctx.session.rem]}
üè† <b>–ê–¥—Ä–µ—Å–∞:</b> ${ctx.session.real_address}
üíº <b>–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:</b> ${ctx.session.nomber_facture_p}
üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> ${ctx.session.phonenumber_p}
üí° <b>–¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:</b> ${countType[ctx.session.type_counter]}
üåû <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –≤–¥–µ–Ω—å:</b> ${ctx.session.day_reading}
üåô <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –≤–Ω–æ—á—ñ:</b> ${ctx.session.night_reading}
‚ö°Ô∏è <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –≤ –ø—ñ–∫:</b> ${ctx.session.peak_reading}`
					await ctx.reply(formattedMessage, {
						reply_markup: keyboardMarkup,
						parse_mode: 'HTML',
					})
				} else {
					await ctx.reply(
						'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
						{ parse_mode: 'HTML' }
					)
				}
			}
		} else if (type_counter === '1') {
			if (/^\d+$/.test(messageText)) {
				ctx.session.day_reading = messageText
				const keyboardMarkup = new InlineKeyboard()
					.text('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏', 'send_data')
					.text('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', 'get_address')
				const formattedMessage = `
				üåÜ <b>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª:</b> ${remType[ctx.session.rem]}
üè† <b>–ê–¥—Ä–µ—Å–∞:</b> ${ctx.session.real_address}
üíº <b>–ù–æ–º–µ—Ä –æ—Å–æ–±–æ–≤–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É:</b> ${ctx.session.nomber_facture_p}
üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> ${ctx.session.phonenumber_p}
üí° <b>–¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:</b> ${countType[ctx.session.type_counter]}
üìä <b>–ü–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É:</b> ${messageText}`
				await ctx.reply(formattedMessage, {
					reply_markup: keyboardMarkup,
					parse_mode: 'HTML',
				})
			} else {
				await ctx.reply(
					'<b>ü§¨ –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞–∑–∞–Ω—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</b>',
					{ parse_mode: 'HTML' }
				)
			}
		}
	} catch (err) {
		console.error('Error processing text message:', err.message)
		await ctx.reply('Failed to process text message.')
	}
})

bot.on('callback_query:data', async ctx => {
	try {
		const data = ctx.callbackQuery.data
		if (data === 'get_addresses') {
			ctx.session = {}
			return await ctx.reply(
				'üè† –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∞–¥—Ä–µ—Å—É /get_addresses –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–∫–∞–∑–∞–Ω—å'
			)
		}
		if (data.includes('select_rem')) {
			ctx.session.rem = data.split('|')[1]
			ctx.session.currentStep = 2
			return await ctx.reply('üè† –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É:')
		}

		if (data.includes('select_countType')) {
			ctx.session.type_counter = data.split('|')[1]
			ctx.session.currentStep = 5
			return await ctx.reply('üì± –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
		}

		if (data === 'save_address' && ctx.session.nomber_facture_p) {
			try {
				const response = await Address.create({
					chat_id: ctx.msg.chat.id,
					real_address: ctx.session.real_address,
					nomber_facture_p: ctx.session.nomber_facture_p,
					type_counter: ctx.session.type_counter,
					rem: ctx.session.rem,
					phonenumber_p: ctx.session.phonenumber_p,
				})
				console.log(response)
				ctx.session = {}
				if (response) {
					return await ctx.reply(
						'üëå –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∞–¥—Ä–µ—Å–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! /get_addresses'
					)
				} else {
					return await ctx.reply('üòî –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ø—Ä–æ–±—É—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ')
				}
			} catch (err) {
				if (err && err.code === 11000) {
					return await ctx.reply(
						'‚òπÔ∏è –î–∞–Ω—ñ, —è–∫—ñ –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏, –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.'
					)
				} else {
					console.error(err)
					return await ctx.reply('üòß –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ')
				}
			}
		}
		if (data === 'send_data') {
			const data = {
				rem: ctx.session.rem,
				type_counter: ctx.session.type_counter,
				pokazaniya_p: ctx.session.day_reading,
				pokazaniya_p2: ctx.session.night_reading,
				pokazaniya_p3: ctx.session.peak_reading,
				nomber_facture_p: ctx.session.nomber_facture_p,
				phonenumber_p: ctx.session.phonenumber_p,
				chackbox_p: 'on',
			}

			const filteredData = {}

			for (const key in data) {
				if (data[key] !== '' && data[key] !== undefined) {
					filteredData[key] = data[key]
				}
			}

			const response = await sendDataToServer(data)

			ctx.session = {}
			if (response) {
				return await ctx.reply('üëå –î—è–∫—É—î–º–æ! –í–∞—ài –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤i–¥–ø—Ä–∞–≤–ª–µ–Ωi!')
			} else {
				ctx.session = {}
				return await ctx.reply(
					'üè† –ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∞–¥—Ä–µ—Å—É /get_addresses –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–∫–∞–∑–∞–Ω—å'
				)
			}
		}

		const [
			chat_id,
			real_address,
			nomber_facture_p,
			type_counter,
			rem,
			phonenumber_p,
		] = data.split('|')
		ctx.session = {
			chat_id,
			real_address,
			nomber_facture_p,
			type_counter,
			rem,
			phonenumber_p,
		}

		if (type_counter === '1') {
			await ctx.reply('‚ö°Ô∏è –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É')
		} else if (type_counter === '2') {
			await ctx.reply(
				'üåû –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É –≤ –¥–µ–Ω–Ω–∏–π —á–∞—Å:'
			)
			ctx.session.stage = 'day_reading'
		} else if (type_counter === '3') {
			await ctx.reply('üåû –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–∫–∞–∑–∏ –ø—Ä–∏–ª–∞–¥—É –æ–±–ª—ñ–∫—É –≤ –¥–µ–Ω—å:')
			ctx.session.stage = 'day_reading'
		} else {
			await ctx.reply(
				'üôÅ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤`—è–∂—ñ—Ç—å—Å—è –∑ –≤–∞—à–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –±–æ—Ç–∞'
			)
		}
	} catch (err) {
		console.error('Error processing callback query:', err.message)
		await ctx.reply('Failed to process callback query.')
	}
})

bot.catch(err => {
	const ctx = err.ctx
	console.error(`Error while handling update ${ctx.update.update_id}:`)
	const e = err.error
	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
	} else if (e instanceof HttpError) {
		console.error('Could not contact Telegram:', e)
	} else {
		console.error('Unknown error:', e)
	}
})

connectDb()
bot.start()
